
yay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000936  000009ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800138  00800138  00000a02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180a  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdf  00000000  00000000  000023b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1e  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ac  00000000  00000000  00003eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000641  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004ba0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__ctors_end>
   4:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
   8:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
   c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  10:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  14:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  18:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  1c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  20:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  24:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  28:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  2c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_11>
  30:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  34:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  38:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  3c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  40:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  44:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  48:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  4c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  50:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  54:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  58:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  5c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  60:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  64:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  68:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  6c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  70:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  74:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  78:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  7c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  80:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  84:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  88:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  8c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  90:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  94:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  98:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  9c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  a0:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  a4:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  a8:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  ac:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
  b0:	0c 94 a3 01 	jmp	0x346	; 0x346 <__bad_interrupt>
	...
  c8:	00 00       	nop
.global timer1_ctc_ocrnx
.global __vector_11

.section .vectors, "ax", @progbits
.org 0x0016        ; = 0x0000 + (11 * 2)
rjmp __vector_11
  ca:	96 c1       	rjmp	.+812    	; 0x3f8 <__vector_11>

000000cc <__trampolines_end>:
  cc:	00 00       	nop
  ce:	00 00       	nop
  d0:	00 00       	nop
  d2:	81 81       	ldd	r24, Z+1	; 0x01
  d4:	18 81       	ld	r17, Y
  d6:	81 00       	.word	0x0081	; ????
  d8:	00 07       	cpc	r16, r16
  da:	00 07       	cpc	r16, r16
  dc:	00 00       	nop
  de:	14 7f       	andi	r17, 0xF4	; 244
  e0:	14 7f       	andi	r17, 0xF4	; 244
  e2:	14 00       	.word	0x0014	; ????
  e4:	24 2a       	or	r2, r20
  e6:	7f 2a       	or	r7, r31
  e8:	12 00       	.word	0x0012	; ????
  ea:	23 13       	cpse	r18, r19
  ec:	08 64       	ori	r16, 0x48	; 72
  ee:	62 00       	.word	0x0062	; ????
  f0:	36 49       	sbci	r19, 0x96	; 150
  f2:	55 22       	and	r5, r21
  f4:	50 00       	.word	0x0050	; ????
  f6:	00 05       	cpc	r16, r0
  f8:	03 00       	.word	0x0003	; ????
  fa:	00 00       	nop
  fc:	00 1c       	adc	r0, r0
  fe:	22 41       	sbci	r18, 0x12	; 18
 100:	00 00       	nop
 102:	00 41       	sbci	r16, 0x10	; 16
 104:	22 1c       	adc	r2, r2
 106:	00 00       	nop
 108:	14 08       	sbc	r1, r4
 10a:	3e 08       	sbc	r3, r14
 10c:	14 00       	.word	0x0014	; ????
 10e:	08 08       	sbc	r0, r8
 110:	3e 08       	sbc	r3, r14
 112:	08 00       	.word	0x0008	; ????
 114:	00 50       	subi	r16, 0x00	; 0
 116:	30 00       	.word	0x0030	; ????
 118:	00 00       	nop
 11a:	08 08       	sbc	r0, r8
 11c:	08 08       	sbc	r0, r8
 11e:	08 00       	.word	0x0008	; ????
 120:	00 60       	ori	r16, 0x00	; 0
 122:	60 00       	.word	0x0060	; ????
 124:	00 00       	nop
 126:	20 10       	cpse	r2, r0
 128:	08 04       	cpc	r0, r8
 12a:	02 00       	.word	0x0002	; ????
 12c:	3e 51       	subi	r19, 0x1E	; 30
 12e:	49 45       	sbci	r20, 0x59	; 89
 130:	3e 00       	.word	0x003e	; ????
 132:	00 42       	sbci	r16, 0x20	; 32
 134:	7f 40       	sbci	r23, 0x0F	; 15
 136:	00 00       	nop
 138:	42 61       	ori	r20, 0x12	; 18
 13a:	51 49       	sbci	r21, 0x91	; 145
 13c:	46 00       	.word	0x0046	; ????
 13e:	21 41       	sbci	r18, 0x11	; 17
 140:	45 4b       	sbci	r20, 0xB5	; 181
 142:	31 00       	.word	0x0031	; ????
 144:	18 14       	cp	r1, r8
 146:	12 7f       	andi	r17, 0xF2	; 242
 148:	10 00       	.word	0x0010	; ????
 14a:	27 45       	sbci	r18, 0x57	; 87
 14c:	45 45       	sbci	r20, 0x55	; 85
 14e:	39 00       	.word	0x0039	; ????
 150:	3c 4a       	sbci	r19, 0xAC	; 172
 152:	49 49       	sbci	r20, 0x99	; 153
 154:	30 00       	.word	0x0030	; ????
 156:	01 71       	andi	r16, 0x11	; 17
 158:	09 05       	cpc	r16, r9
 15a:	03 00       	.word	0x0003	; ????
 15c:	36 49       	sbci	r19, 0x96	; 150
 15e:	49 49       	sbci	r20, 0x99	; 153
 160:	36 00       	.word	0x0036	; ????
 162:	06 49       	sbci	r16, 0x96	; 150
 164:	49 29       	or	r20, r9
 166:	1e 00       	.word	0x001e	; ????
 168:	00 36       	cpi	r16, 0x60	; 96
 16a:	36 00       	.word	0x0036	; ????
 16c:	00 00       	nop
 16e:	00 56       	subi	r16, 0x60	; 96
 170:	36 00       	.word	0x0036	; ????
 172:	00 00       	nop
 174:	08 14       	cp	r0, r8
 176:	22 41       	sbci	r18, 0x12	; 18
 178:	00 00       	nop
 17a:	14 14       	cp	r1, r4
 17c:	14 14       	cp	r1, r4
 17e:	14 00       	.word	0x0014	; ????
 180:	00 41       	sbci	r16, 0x10	; 16
 182:	22 14       	cp	r2, r2
 184:	08 00       	.word	0x0008	; ????
 186:	02 01       	movw	r0, r4
 188:	51 09       	sbc	r21, r1
 18a:	06 00       	.word	0x0006	; ????
 18c:	32 49       	sbci	r19, 0x92	; 146
 18e:	79 41       	sbci	r23, 0x19	; 25
 190:	3e 00       	.word	0x003e	; ????
 192:	7e 11       	cpse	r23, r14
 194:	11 11       	cpse	r17, r1
 196:	7e 00       	.word	0x007e	; ????
 198:	7f 49       	sbci	r23, 0x9F	; 159
 19a:	49 49       	sbci	r20, 0x99	; 153
 19c:	36 00       	.word	0x0036	; ????
 19e:	3e 41       	sbci	r19, 0x1E	; 30
 1a0:	41 41       	sbci	r20, 0x11	; 17
 1a2:	22 00       	.word	0x0022	; ????
 1a4:	7f 41       	sbci	r23, 0x1F	; 31
 1a6:	41 22       	and	r4, r17
 1a8:	1c 00       	.word	0x001c	; ????
 1aa:	7f 49       	sbci	r23, 0x9F	; 159
 1ac:	49 49       	sbci	r20, 0x99	; 153
 1ae:	41 00       	.word	0x0041	; ????
 1b0:	7f 09       	sbc	r23, r15
 1b2:	09 09       	sbc	r16, r9
 1b4:	01 00       	.word	0x0001	; ????
 1b6:	3e 41       	sbci	r19, 0x1E	; 30
 1b8:	49 49       	sbci	r20, 0x99	; 153
 1ba:	7a 00       	.word	0x007a	; ????
 1bc:	7f 08       	sbc	r7, r15
 1be:	08 08       	sbc	r0, r8
 1c0:	7f 00       	.word	0x007f	; ????
 1c2:	00 41       	sbci	r16, 0x10	; 16
 1c4:	7f 41       	sbci	r23, 0x1F	; 31
 1c6:	00 00       	nop
 1c8:	20 40       	sbci	r18, 0x00	; 0
 1ca:	41 3f       	cpi	r20, 0xF1	; 241
 1cc:	01 00       	.word	0x0001	; ????
 1ce:	7f 08       	sbc	r7, r15
 1d0:	14 22       	and	r1, r20
 1d2:	41 00       	.word	0x0041	; ????
 1d4:	7f 40       	sbci	r23, 0x0F	; 15
 1d6:	40 40       	sbci	r20, 0x00	; 0
 1d8:	40 00       	.word	0x0040	; ????
 1da:	7f 02       	muls	r23, r31
 1dc:	0c 02       	muls	r16, r28
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 04       	cpc	r7, r15
 1e2:	08 10       	cpse	r0, r8
 1e4:	7f 00       	.word	0x007f	; ????
 1e6:	3e 41       	sbci	r19, 0x1E	; 30
 1e8:	41 41       	sbci	r20, 0x11	; 17
 1ea:	3e 00       	.word	0x003e	; ????
 1ec:	7f 09       	sbc	r23, r15
 1ee:	09 09       	sbc	r16, r9
 1f0:	06 00       	.word	0x0006	; ????
 1f2:	3e 41       	sbci	r19, 0x1E	; 30
 1f4:	51 21       	and	r21, r1
 1f6:	5e 00       	.word	0x005e	; ????
 1f8:	7f 09       	sbc	r23, r15
 1fa:	19 29       	or	r17, r9
 1fc:	46 00       	.word	0x0046	; ????
 1fe:	46 49       	sbci	r20, 0x96	; 150
 200:	49 49       	sbci	r20, 0x99	; 153
 202:	31 00       	.word	0x0031	; ????
 204:	01 01       	movw	r0, r2
 206:	7f 01       	movw	r14, r30
 208:	01 00       	.word	0x0001	; ????
 20a:	3f 40       	sbci	r19, 0x0F	; 15
 20c:	40 40       	sbci	r20, 0x00	; 0
 20e:	3f 00       	.word	0x003f	; ????
 210:	1f 20       	and	r1, r15
 212:	40 20       	and	r4, r0
 214:	1f 00       	.word	0x001f	; ????
 216:	3f 40       	sbci	r19, 0x0F	; 15
 218:	38 40       	sbci	r19, 0x08	; 8
 21a:	3f 00       	.word	0x003f	; ????
 21c:	63 14       	cp	r6, r3
 21e:	08 14       	cp	r0, r8
 220:	63 00       	.word	0x0063	; ????
 222:	07 08       	sbc	r0, r7
 224:	70 08       	sbc	r7, r0
 226:	07 00       	.word	0x0007	; ????
 228:	61 51       	subi	r22, 0x11	; 17
 22a:	49 45       	sbci	r20, 0x59	; 89
 22c:	43 00       	.word	0x0043	; ????
 22e:	00 7f       	andi	r16, 0xF0	; 240
 230:	41 41       	sbci	r20, 0x11	; 17
 232:	00 00       	nop
 234:	02 04       	cpc	r0, r2
 236:	08 10       	cpse	r0, r8
 238:	20 00       	.word	0x0020	; ????
 23a:	00 41       	sbci	r16, 0x10	; 16
 23c:	41 7f       	andi	r20, 0xF1	; 241
 23e:	00 00       	nop
 240:	04 02       	muls	r16, r20
 242:	01 02       	muls	r16, r17
 244:	04 00       	.word	0x0004	; ????
 246:	40 40       	sbci	r20, 0x00	; 0
 248:	40 40       	sbci	r20, 0x00	; 0
 24a:	40 00       	.word	0x0040	; ????
 24c:	00 01       	movw	r0, r0
 24e:	02 04       	cpc	r0, r2
 250:	00 00       	nop
 252:	20 54       	subi	r18, 0x40	; 64
 254:	54 54       	subi	r21, 0x44	; 68
 256:	78 00       	.word	0x0078	; ????
 258:	7f 48       	sbci	r23, 0x8F	; 143
 25a:	44 44       	sbci	r20, 0x44	; 68
 25c:	38 00       	.word	0x0038	; ????
 25e:	38 44       	sbci	r19, 0x48	; 72
 260:	44 44       	sbci	r20, 0x44	; 68
 262:	20 00       	.word	0x0020	; ????
 264:	38 44       	sbci	r19, 0x48	; 72
 266:	44 48       	sbci	r20, 0x84	; 132
 268:	7f 00       	.word	0x007f	; ????
 26a:	38 54       	subi	r19, 0x48	; 72
 26c:	54 54       	subi	r21, 0x44	; 68
 26e:	18 00       	.word	0x0018	; ????
 270:	08 7e       	andi	r16, 0xE8	; 232
 272:	09 01       	movw	r0, r18
 274:	02 00       	.word	0x0002	; ????
 276:	0c 52       	subi	r16, 0x2C	; 44
 278:	52 52       	subi	r21, 0x22	; 34
 27a:	3e 00       	.word	0x003e	; ????
 27c:	7f 08       	sbc	r7, r15
 27e:	04 04       	cpc	r0, r4
 280:	78 00       	.word	0x0078	; ????
 282:	00 44       	sbci	r16, 0x40	; 64
 284:	7d 40       	sbci	r23, 0x0D	; 13
 286:	00 00       	nop
 288:	20 40       	sbci	r18, 0x00	; 0
 28a:	44 3d       	cpi	r20, 0xD4	; 212
 28c:	00 00       	nop
 28e:	7f 10       	cpse	r7, r15
 290:	28 44       	sbci	r18, 0x48	; 72
 292:	00 00       	nop
 294:	00 41       	sbci	r16, 0x10	; 16
 296:	7f 40       	sbci	r23, 0x0F	; 15
 298:	00 00       	nop
 29a:	7c 04       	cpc	r7, r12
 29c:	18 04       	cpc	r1, r8
 29e:	78 00       	.word	0x0078	; ????
 2a0:	7c 08       	sbc	r7, r12
 2a2:	04 04       	cpc	r0, r4
 2a4:	78 00       	.word	0x0078	; ????
 2a6:	38 44       	sbci	r19, 0x48	; 72
 2a8:	44 44       	sbci	r20, 0x44	; 68
 2aa:	38 00       	.word	0x0038	; ????
 2ac:	7c 14       	cp	r7, r12
 2ae:	14 14       	cp	r1, r4
 2b0:	08 00       	.word	0x0008	; ????
 2b2:	08 14       	cp	r0, r8
 2b4:	14 14       	cp	r1, r4
 2b6:	7c 00       	.word	0x007c	; ????
 2b8:	7c 08       	sbc	r7, r12
 2ba:	04 04       	cpc	r0, r4
 2bc:	08 00       	.word	0x0008	; ????
 2be:	48 54       	subi	r20, 0x48	; 72
 2c0:	54 54       	subi	r21, 0x44	; 68
 2c2:	20 00       	.word	0x0020	; ????
 2c4:	04 3f       	cpi	r16, 0xF4	; 244
 2c6:	44 40       	sbci	r20, 0x04	; 4
 2c8:	20 00       	.word	0x0020	; ????
 2ca:	3c 40       	sbci	r19, 0x0C	; 12
 2cc:	40 20       	and	r4, r0
 2ce:	7c 00       	.word	0x007c	; ????
 2d0:	1c 20       	and	r1, r12
 2d2:	40 20       	and	r4, r0
 2d4:	1c 00       	.word	0x001c	; ????
 2d6:	3c 40       	sbci	r19, 0x0C	; 12
 2d8:	30 40       	sbci	r19, 0x00	; 0
 2da:	3c 00       	.word	0x003c	; ????
 2dc:	44 28       	or	r4, r4
 2de:	10 28       	or	r1, r0
 2e0:	44 00       	.word	0x0044	; ????
 2e2:	0c 50       	subi	r16, 0x0C	; 12
 2e4:	50 50       	subi	r21, 0x00	; 0
 2e6:	3c 00       	.word	0x003c	; ????
 2e8:	44 64       	ori	r20, 0x44	; 68
 2ea:	54 4c       	sbci	r21, 0xC4	; 196
 2ec:	44 00       	.word	0x0044	; ????
 2ee:	00 08       	sbc	r0, r0
 2f0:	36 41       	sbci	r19, 0x16	; 22
 2f2:	00 00       	nop
 2f4:	00 00       	nop
 2f6:	7f 00       	.word	0x007f	; ????
 2f8:	00 00       	nop
 2fa:	00 41       	sbci	r16, 0x10	; 16
 2fc:	36 08       	sbc	r3, r6
 2fe:	00 00       	nop
 300:	10 08       	sbc	r1, r0
 302:	08 10       	cpse	r0, r8
 304:	08 00       	.word	0x0008	; ????
 306:	00 00       	nop
 308:	00 00       	nop
	...

0000030c <__ctors_end>:
 30c:	11 24       	eor	r1, r1
 30e:	1f be       	out	0x3f, r1	; 63
 310:	cf ef       	ldi	r28, 0xFF	; 255
 312:	d8 e0       	ldi	r29, 0x08	; 8
 314:	de bf       	out	0x3e, r29	; 62
 316:	cd bf       	out	0x3d, r28	; 61

00000318 <__do_copy_data>:
 318:	11 e0       	ldi	r17, 0x01	; 1
 31a:	a0 e0       	ldi	r26, 0x00	; 0
 31c:	b1 e0       	ldi	r27, 0x01	; 1
 31e:	e6 e3       	ldi	r30, 0x36	; 54
 320:	f9 e0       	ldi	r31, 0x09	; 9
 322:	02 c0       	rjmp	.+4      	; 0x328 <__do_copy_data+0x10>
 324:	05 90       	lpm	r0, Z+
 326:	0d 92       	st	X+, r0
 328:	a8 33       	cpi	r26, 0x38	; 56
 32a:	b1 07       	cpc	r27, r17
 32c:	d9 f7       	brne	.-10     	; 0x324 <__do_copy_data+0xc>

0000032e <__do_clear_bss>:
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	a8 e3       	ldi	r26, 0x38	; 56
 332:	b1 e0       	ldi	r27, 0x01	; 1
 334:	01 c0       	rjmp	.+2      	; 0x338 <.do_clear_bss_start>

00000336 <.do_clear_bss_loop>:
 336:	1d 92       	st	X+, r1

00000338 <.do_clear_bss_start>:
 338:	ac 33       	cpi	r26, 0x3C	; 60
 33a:	b2 07       	cpc	r27, r18
 33c:	e1 f7       	brne	.-8      	; 0x336 <.do_clear_bss_loop>
 33e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <main>
 342:	0c 94 99 04 	jmp	0x932	; 0x932 <_exit>

00000346 <__bad_interrupt>:
 346:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000034a <avr_i2c_init>:
.equ TWBR, 0xB8
.equ TWCR, 0xBC
.equ TWEN, 2

avr_i2c_init:
	ldi r16, 0x00 // Prescaler 1
 34a:	00 e0       	ldi	r16, 0x00	; 0
	sts TWSR, r16
 34c:	00 93 b9 00 	sts	0x00B9, r16	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

	ldi r16, 0x48 ; ((F_CPU / scl_freq) - 16) / 2
 350:	08 e4       	ldi	r16, 0x48	; 72
	sts TWBR, r16
 352:	00 93 b8 00 	sts	0x00B8, r16	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	ldi r16, (1 << TWEN) // Enable TWI
 356:	04 e0       	ldi	r16, 0x04	; 4
	sts TWCR, r16
 358:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	ret
 35c:	08 95       	ret

0000035e <avr_i2c_start>:
.equ TWDR, 0xBB
.equ TW_MT_SLA_ACK, 0x18
.equ TW_MR_SLA_ACK, 0x40

avr_i2c_start:
	ldi r16, (1 << TWINT) | (1 << TWSTA) | (1 << TWEN)
 35e:	04 ea       	ldi	r16, 0xA4	; 164
	sts TWCR, r16
 360:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	rcall avr_i2c_twint_wait
 364:	27 d0       	rcall	.+78     	; 0x3b4 <avr_i2c_twint_wait>

	lds r16, TWSR
 366:	00 91 b9 00 	lds	r16, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	andi r16, 0xF8
 36a:	08 7f       	andi	r16, 0xF8	; 248

	cpi r16, TW_START
 36c:	08 30       	cpi	r16, 0x08	; 8
	breq avr_i2c_start_continue
 36e:	19 f0       	breq	.+6      	; 0x376 <avr_i2c_start_continue>

	cpi r16, TW_REP_START
 370:	00 31       	cpi	r16, 0x10	; 16
	breq avr_i2c_start_continue
 372:	09 f0       	breq	.+2      	; 0x376 <avr_i2c_start_continue>

	rjmp avr_i2c_failure
 374:	29 c0       	rjmp	.+82     	; 0x3c8 <avr_i2c_failure>

00000376 <avr_i2c_start_continue>:

avr_i2c_start_continue:
	sts TWDR, r24
 376:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	ldi r16, (1 << TWINT) | (1 << TWEN)
 37a:	04 e8       	ldi	r16, 0x84	; 132
	sts TWCR, r16
 37c:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	rcall avr_i2c_twint_wait 
 380:	19 d0       	rcall	.+50     	; 0x3b4 <avr_i2c_twint_wait>
	
	lds r16, TWSR
 382:	00 91 b9 00 	lds	r16, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	andi r16, 0xF8
 386:	08 7f       	andi	r16, 0xF8	; 248

	cpi r16, TW_MT_SLA_ACK
 388:	08 31       	cpi	r16, 0x18	; 24
	breq avr_i2c_success
 38a:	09 f1       	breq	.+66     	; 0x3ce <avr_i2c_success>

	cpi r16, TW_MR_SLA_ACK
 38c:	00 34       	cpi	r16, 0x40	; 64
	breq avr_i2c_success
 38e:	f9 f0       	breq	.+62     	; 0x3ce <avr_i2c_success>

	; either jump or let it continue to failure
	rjmp avr_i2c_failure
 390:	1b c0       	rjmp	.+54     	; 0x3c8 <avr_i2c_failure>

00000392 <avr_i2c_stop>:
.equ TWINT, 7
.equ TWSTO, 4
.equ TWEN, 2

avr_i2c_stop:
	ldi r16, (1 << TWINT) | (1 << TWSTO) | (1 << TWEN)
 392:	04 e9       	ldi	r16, 0x94	; 148
	sts TWCR, r16
 394:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	rcall avr_i2c_twsto_wait_loop
 398:	12 d0       	rcall	.+36     	; 0x3be <avr_i2c_twsto_wait_loop>

	ret
 39a:	08 95       	ret

0000039c <avr_i2c_write>:
.equ TWEN, 2
.equ TWSR, 0xB9
.equ TW_MT_DATA_ACK, 0x28

avr_i2c_write:
	sts TWDR, r24 ; param
 39c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	ldi r16, (1 << TWINT) | (1 << TWEN)
 3a0:	04 e8       	ldi	r16, 0x84	; 132
	sts TWCR, r16
 3a2:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	rcall avr_i2c_twint_wait
 3a6:	06 d0       	rcall	.+12     	; 0x3b4 <avr_i2c_twint_wait>

	lds r16, TWSR
 3a8:	00 91 b9 00 	lds	r16, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	andi r16, 0xF8
 3ac:	08 7f       	andi	r16, 0xF8	; 248
	cpi r16, TW_MT_DATA_ACK
 3ae:	08 32       	cpi	r16, 0x28	; 40
	breq avr_i2c_success
 3b0:	71 f0       	breq	.+28     	; 0x3ce <avr_i2c_success>

	rjmp avr_i2c_failure
 3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <avr_i2c_failure>

000003b4 <avr_i2c_twint_wait>:

; Wait for TWINT to be set
avr_i2c_twint_wait:

avr_i2c_twint_wait_loop:
	lds r16, TWCR
 3b4:	00 91 bc 00 	lds	r16, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	sbrs r16, TWINT
 3b8:	07 ff       	sbrs	r16, 7
	rjmp avr_i2c_twint_wait_loop
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <avr_i2c_twint_wait>
	ret
 3bc:	08 95       	ret

000003be <avr_i2c_twsto_wait_loop>:

; Wait for TWSTO to be cleared
avr_i2c_twsto_wait_loop:
	lds r16, TWCR
 3be:	00 91 bc 00 	lds	r16, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	sbrc r16, TWSTO
 3c2:	04 fd       	sbrc	r16, 4
	rjmp avr_i2c_twsto_wait_loop
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <avr_i2c_twsto_wait_loop>
	ret
 3c6:	08 95       	ret

000003c8 <avr_i2c_failure>:

;=================================
; Success of Failures (Booleans)
avr_i2c_failure:
	clr r24
 3c8:	88 27       	eor	r24, r24
	ldi r24, 0
 3ca:	80 e0       	ldi	r24, 0x00	; 0
	ret
 3cc:	08 95       	ret

000003ce <avr_i2c_success>:

avr_i2c_success:
	clr r24
 3ce:	88 27       	eor	r24, r24
	ldi r24, 1
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	08 95       	ret

000003d4 <timer1_ctc_ocrnx>:
.equ TIMSK1, 0x6F
.equ OCIE1A, 1

timer1_ctc_ocrnx:
	; Set CTC mode
	lds r16, TCCR1B 
 3d4:	00 91 81 00 	lds	r16, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	; Set b011 for 64 prescaler (CTC) load immedaite
	ori r16, (1 << WGM12) |  (1 << CS11) | (1 << CS10)
 3d8:	0d 60       	ori	r16, 0x0D	; 13
	sts TCCR1B, r16
 3da:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	; Set 100ms
	ldi r16, lo8(24999)
 3de:	07 ea       	ldi	r16, 0xA7	; 167
	ldi r17, hi8(24999)
 3e0:	11 e6       	ldi	r17, 0x61	; 97
	sts OCR1AL, r16
 3e2:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sts OCR1AH, r17
 3e6:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>

	lds r16, TIMSK1
 3ea:	00 91 6f 00 	lds	r16, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	ori r16, (1 << OCIE1A)
 3ee:	02 60       	ori	r16, 0x02	; 2
	sts TIMSK1, r16
 3f0:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	; Set global interrupts
	sei
 3f4:	78 94       	sei
	
	ret
 3f6:	08 95       	ret

000003f8 <__vector_11>:

__vector_11:
	ldi r16, 1
 3f8:	01 e0       	ldi	r16, 0x01	; 1
	sts interrupted, r16
 3fa:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__DATA_REGION_ORIGIN__>
 3fe:	18 95       	reti

00000400 <adc_init>:

#include <avr/io.h>
#include <util/delay.h>

void adc_init() {
	ADMUX = (1 << REFS0);              // AVcc as reference
 400:	80 e4       	ldi	r24, 0x40	; 64
 402:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN)               // Enable ADC
 406:	87 e8       	ldi	r24, 0x87	; 135
 408:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 40c:	08 95       	ret

0000040e <adc_read>:
	| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Prescaler 128
}

uint16_t adc_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  // Select ADC channel
 40e:	ec e7       	ldi	r30, 0x7C	; 124
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	90 81       	ld	r25, Z
 414:	90 7f       	andi	r25, 0xF0	; 240
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	89 2b       	or	r24, r25
 41a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                     // Start conversion
 41c:	ea e7       	ldi	r30, 0x7A	; 122
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	80 64       	ori	r24, 0x40	; 64
 424:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));              // Wait until done
 426:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 42a:	86 fd       	sbrc	r24, 6
 42c:	fc cf       	rjmp	.-8      	; 0x426 <adc_read+0x18>
	return ADC;
 42e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 432:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 436:	08 95       	ret

00000438 <smooth_adc>:

uint16_t smooth_adc(uint8_t channel) {
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	d8 2f       	mov	r29, r24
	uint32_t total = 0;
	for (uint8_t i = 0; i < 4; i++) {
 446:	c0 e0       	ldi	r28, 0x00	; 0
	while (ADCSRA & (1 << ADSC));              // Wait until done
	return ADC;
}

uint16_t smooth_adc(uint8_t channel) {
	uint32_t total = 0;
 448:	c1 2c       	mov	r12, r1
 44a:	d1 2c       	mov	r13, r1
 44c:	76 01       	movw	r14, r12
	for (uint8_t i = 0; i < 4; i++) {
 44e:	0e c0       	rjmp	.+28     	; 0x46c <smooth_adc+0x34>
		total += adc_read(channel);
 450:	8d 2f       	mov	r24, r29
 452:	0e 94 07 02 	call	0x40e	; 0x40e <adc_read>
 456:	c8 0e       	add	r12, r24
 458:	d9 1e       	adc	r13, r25
 45a:	e1 1c       	adc	r14, r1
 45c:	f1 1c       	adc	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45e:	8f e3       	ldi	r24, 0x3F	; 63
 460:	9f e1       	ldi	r25, 0x1F	; 31
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <smooth_adc+0x2a>
 466:	00 c0       	rjmp	.+0      	; 0x468 <smooth_adc+0x30>
 468:	00 00       	nop
	return ADC;
}

uint16_t smooth_adc(uint8_t channel) {
	uint32_t total = 0;
	for (uint8_t i = 0; i < 4; i++) {
 46a:	cf 5f       	subi	r28, 0xFF	; 255
 46c:	c4 30       	cpi	r28, 0x04	; 4
 46e:	80 f3       	brcs	.-32     	; 0x450 <smooth_adc+0x18>
		total += adc_read(channel);
		_delay_ms(2);  // Short delay for stability
	}
	return total / 4;
 470:	d7 01       	movw	r26, r14
 472:	c6 01       	movw	r24, r12
 474:	b6 95       	lsr	r27
 476:	a7 95       	ror	r26
 478:	97 95       	ror	r25
 47a:	87 95       	ror	r24
 47c:	b6 95       	lsr	r27
 47e:	a7 95       	ror	r26
 480:	97 95       	ror	r25
 482:	87 95       	ror	r24
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	df 90       	pop	r13
 48e:	cf 90       	pop	r12
 490:	08 95       	ret

00000492 <joystick_init>:

void joystick_init() {
	adc_init();
 492:	0e 94 00 02 	call	0x400	; 0x400 <adc_init>
	DDRD &= ~(1 << SW_PIN);  // SW pin as input
 496:	8a b1       	in	r24, 0x0a	; 10
 498:	8f 7e       	andi	r24, 0xEF	; 239
 49a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << SW_PIN);  // Enable pull-up
 49c:	8b b1       	in	r24, 0x0b	; 11
 49e:	80 61       	ori	r24, 0x10	; 16
 4a0:	8b b9       	out	0x0b, r24	; 11
 4a2:	08 95       	ret

000004a4 <ssd1306_send_command>:
void ssd1306_send_data(uint8_t data) {
	avr_i2c_start(SSD1306_ADDRESS << 1);
	avr_i2c_write(0x40);  // Control byte: Co = 0, D/C# = 1 => data
	avr_i2c_write(data);
	avr_i2c_stop();
}
 4a4:	cf 93       	push	r28
 4a6:	c8 2f       	mov	r28, r24
 4a8:	88 e7       	ldi	r24, 0x78	; 120
 4aa:	0e 94 af 01 	call	0x35e	; 0x35e <avr_i2c_start>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
 4b4:	8c 2f       	mov	r24, r28
 4b6:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
 4ba:	0e 94 c9 01 	call	0x392	; 0x392 <avr_i2c_stop>
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <ssd1306_init>:

void ssd1306_init(void) {
	avr_i2c_init();
 4c2:	0e 94 a5 01 	call	0x34a	; 0x34a <avr_i2c_init>

	ssd1306_send_command(0xAE); // Display OFF
 4c6:	8e ea       	ldi	r24, 0xAE	; 174
 4c8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0x20); // Set Memory Addressing Mode
 4cc:	80 e2       	ldi	r24, 0x20	; 32
 4ce:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x00); // Horizontal Addressing Mode
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xB0); // Page Start
 4d8:	80 eb       	ldi	r24, 0xB0	; 176
 4da:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0xC8); // COM Output Scan Direction: remapped
 4de:	88 ec       	ldi	r24, 0xC8	; 200
 4e0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0x00); // Low column address
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x10); // High column address
 4ea:	80 e1       	ldi	r24, 0x10	; 16
 4ec:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0x40); // Start line address
 4f0:	80 e4       	ldi	r24, 0x40	; 64
 4f2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0x81); // Contrast control
 4f6:	81 e8       	ldi	r24, 0x81	; 129
 4f8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x7F);
 4fc:	8f e7       	ldi	r24, 0x7F	; 127
 4fe:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xA1); // Segment re-map
 502:	81 ea       	ldi	r24, 0xA1	; 161
 504:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0xA6); // Normal display
 508:	86 ea       	ldi	r24, 0xA6	; 166
 50a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xA8); // Multiplex ratio
 50e:	88 ea       	ldi	r24, 0xA8	; 168
 510:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x3F); // 1/64 duty
 514:	8f e3       	ldi	r24, 0x3F	; 63
 516:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xA4); // Display follows RAM
 51a:	84 ea       	ldi	r24, 0xA4	; 164
 51c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xD3); // Display offset
 520:	83 ed       	ldi	r24, 0xD3	; 211
 522:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x00);
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xD5); // Display clock
 52c:	85 ed       	ldi	r24, 0xD5	; 213
 52e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x80);
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xD9); // Pre-charge period
 538:	89 ed       	ldi	r24, 0xD9	; 217
 53a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0xF1);
 53e:	81 ef       	ldi	r24, 0xF1	; 241
 540:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xDA); // COM pins
 544:	8a ed       	ldi	r24, 0xDA	; 218
 546:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x12);
 54a:	82 e1       	ldi	r24, 0x12	; 18
 54c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xDB); // VCOM detect
 550:	8b ed       	ldi	r24, 0xDB	; 219
 552:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x40);
 556:	80 e4       	ldi	r24, 0x40	; 64
 558:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0x8D); // Charge pump
 55c:	8d e8       	ldi	r24, 0x8D	; 141
 55e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x14);
 562:	84 e1       	ldi	r24, 0x14	; 20
 564:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>

	ssd1306_send_command(0xAF); // Display ON
 568:	8f ea       	ldi	r24, 0xAF	; 175
 56a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
 56e:	08 95       	ret

00000570 <ssd1306_clear_screen>:
}

void ssd1306_clear_screen(void) {
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
	for (uint8_t page = 0; page < 8; page++) {
 574:	d0 e0       	ldi	r29, 0x00	; 0
 576:	2b c0       	rjmp	.+86     	; 0x5ce <ssd1306_clear_screen+0x5e>
		// Set column and page address
		avr_i2c_start(SSD1306_ADDRESS << 1);
 578:	88 e7       	ldi	r24, 0x78	; 120
 57a:	0e 94 af 01 	call	0x35e	; 0x35e <avr_i2c_start>
		avr_i2c_write(0x00); // Command mode
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
		avr_i2c_write(0x21); // Set column address
 584:	81 e2       	ldi	r24, 0x21	; 33
 586:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
		avr_i2c_write(0);    // Start at 0
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
		avr_i2c_write(SSD1306_WIDTH - 1); // End at 127
 590:	8f e7       	ldi	r24, 0x7F	; 127
 592:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
		avr_i2c_write(0x22); // Set page address
 596:	82 e2       	ldi	r24, 0x22	; 34
 598:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
		avr_i2c_write(page);
 59c:	8d 2f       	mov	r24, r29
 59e:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
		avr_i2c_write(page);
 5a2:	8d 2f       	mov	r24, r29
 5a4:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
		avr_i2c_stop();
 5a8:	0e 94 c9 01 	call	0x392	; 0x392 <avr_i2c_stop>

		// Write 128 bytes of zero for this page
		avr_i2c_start(SSD1306_ADDRESS << 1);
 5ac:	88 e7       	ldi	r24, 0x78	; 120
 5ae:	0e 94 af 01 	call	0x35e	; 0x35e <avr_i2c_start>
		avr_i2c_write(0x40); // Data mode
 5b2:	80 e4       	ldi	r24, 0x40	; 64
 5b4:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>

		for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 5b8:	c0 e0       	ldi	r28, 0x00	; 0
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <ssd1306_clear_screen+0x54>
			avr_i2c_write(0x00);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>

		// Write 128 bytes of zero for this page
		avr_i2c_start(SSD1306_ADDRESS << 1);
		avr_i2c_write(0x40); // Data mode

		for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 5c2:	cf 5f       	subi	r28, 0xFF	; 255
 5c4:	cc 23       	and	r28, r28
 5c6:	d4 f7       	brge	.-12     	; 0x5bc <ssd1306_clear_screen+0x4c>
			avr_i2c_write(0x00);
		}

		avr_i2c_stop();
 5c8:	0e 94 c9 01 	call	0x392	; 0x392 <avr_i2c_stop>

	ssd1306_send_command(0xAF); // Display ON
}

void ssd1306_clear_screen(void) {
	for (uint8_t page = 0; page < 8; page++) {
 5cc:	df 5f       	subi	r29, 0xFF	; 255
 5ce:	d8 30       	cpi	r29, 0x08	; 8
 5d0:	98 f2       	brcs	.-90     	; 0x578 <ssd1306_clear_screen+0x8>
			avr_i2c_write(0x00);
		}

		avr_i2c_stop();
	}
}
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <ssd1306_draw_pixel>:

void ssd1306_clear_prev() {
	ssd1306_draw_pixel(prev_x, prev_y, 0);
}

void ssd1306_draw_pixel(uint8_t x, uint8_t y, uint8_t color) {
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 5e0:	88 23       	and	r24, r24
 5e2:	c4 f1       	brlt	.+112    	; 0x654 <ssd1306_draw_pixel+0x7c>
 5e4:	60 34       	cpi	r22, 0x40	; 64
 5e6:	b0 f5       	brcc	.+108    	; 0x654 <ssd1306_draw_pixel+0x7c>
 5e8:	14 2f       	mov	r17, r20
 5ea:	d6 2f       	mov	r29, r22
 5ec:	c8 2f       	mov	r28, r24
	
	avr_i2c_start(SSD1306_ADDRESS << 1);
 5ee:	88 e7       	ldi	r24, 0x78	; 120
 5f0:	0e 94 af 01 	call	0x35e	; 0x35e <avr_i2c_start>
	avr_i2c_write(0x00); // Command mode
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
	ssd1306_send_command(0x21);
 5fa:	81 e2       	ldi	r24, 0x21	; 33
 5fc:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(x);
 600:	8c 2f       	mov	r24, r28
 602:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(x);
 606:	8c 2f       	mov	r24, r28
 608:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x22);
 60c:	82 e2       	ldi	r24, 0x22	; 34
 60e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(y / 8);
 612:	0d 2f       	mov	r16, r29
 614:	06 95       	lsr	r16
 616:	06 95       	lsr	r16
 618:	06 95       	lsr	r16
 61a:	80 2f       	mov	r24, r16
 61c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(y / 8);
 620:	80 2f       	mov	r24, r16
 622:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	avr_i2c_stop();
 626:	0e 94 c9 01 	call	0x392	; 0x392 <avr_i2c_stop>
	
	avr_i2c_start(SSD1306_ADDRESS << 1);
 62a:	88 e7       	ldi	r24, 0x78	; 120
 62c:	0e 94 af 01 	call	0x35e	; 0x35e <avr_i2c_start>
	avr_i2c_write(0x40);  // Data mode
 630:	80 e4       	ldi	r24, 0x40	; 64
 632:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
	avr_i2c_write(color << (y % 8));
 636:	8d 2f       	mov	r24, r29
 638:	87 70       	andi	r24, 0x07	; 7
 63a:	01 c0       	rjmp	.+2      	; 0x63e <ssd1306_draw_pixel+0x66>
 63c:	11 0f       	add	r17, r17
 63e:	8a 95       	dec	r24
 640:	ea f7       	brpl	.-6      	; 0x63c <ssd1306_draw_pixel+0x64>
 642:	81 2f       	mov	r24, r17
 644:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
	avr_i2c_stop();
 648:	0e 94 c9 01 	call	0x392	; 0x392 <avr_i2c_stop>
	
	prev_x = x;
 64c:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <prev_x>
	prev_y = y;
 650:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <prev_y>
}
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <ssd1306_clear_prev>:

static uint8_t prev_y = 0;
static uint8_t prev_x = 0;

void ssd1306_clear_prev() {
	ssd1306_draw_pixel(prev_x, prev_y, 0);
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <prev_y>
 664:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <prev_x>
 668:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ssd1306_draw_pixel>
 66c:	08 95       	ret

0000066e <ssd1306_draw_char>:
}

uint8_t indexcol = 0;
uint8_t indexpage = 0;

void ssd1306_draw_char(char ch, uint8_t x, uint8_t y) {
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
	uint8_t offset = x + CHARS_COLS_LENGTH + indexcol;
 676:	c0 91 39 01 	lds	r28, 0x0139	; 0x800139 <indexcol>
 67a:	c6 0f       	add	r28, r22
 67c:	ca 5f       	subi	r28, 0xFA	; 250
	uint8_t page = (y / 8);
 67e:	d4 2f       	mov	r29, r20
 680:	d6 95       	lsr	r29
 682:	d6 95       	lsr	r29
 684:	d6 95       	lsr	r29
	if (offset > SSD1306_WIDTH) {
 686:	c1 38       	cpi	r28, 0x81	; 129
 688:	48 f0       	brcs	.+18     	; 0x69c <ssd1306_draw_char+0x2e>
		indexpage++;
 68a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <__data_end>
 68e:	9f 5f       	subi	r25, 0xFF	; 255
 690:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <__data_end>
		offset = x + CHARS_COLS_LENGTH;
 694:	c6 e0       	ldi	r28, 0x06	; 6
 696:	c6 0f       	add	r28, r22
		indexcol = 0;
 698:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <indexcol>
	}
		
	if (page > 7) { return; }
 69c:	d8 30       	cpi	r29, 0x08	; 8
 69e:	08 f0       	brcs	.+2      	; 0x6a2 <ssd1306_draw_char+0x34>
 6a0:	46 c0       	rjmp	.+140    	; 0x72e <ssd1306_draw_char+0xc0>
 6a2:	06 2f       	mov	r16, r22
 6a4:	18 2f       	mov	r17, r24
		
	avr_i2c_start(SSD1306_ADDRESS << 1);
 6a6:	88 e7       	ldi	r24, 0x78	; 120
 6a8:	0e 94 af 01 	call	0x35e	; 0x35e <avr_i2c_start>
	avr_i2c_write(0x00); // Command mode
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
	ssd1306_send_command(0x21);
 6b2:	81 e2       	ldi	r24, 0x21	; 33
 6b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(x + indexcol);
 6b8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <indexcol>
 6bc:	80 0f       	add	r24, r16
 6be:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(offset);
 6c2:	8c 2f       	mov	r24, r28
 6c4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(0x22);
 6c8:	82 e2       	ldi	r24, 0x22	; 34
 6ca:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(page + indexpage);
 6ce:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 6d2:	8d 0f       	add	r24, r29
 6d4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	ssd1306_send_command(page + indexpage);
 6d8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 6dc:	8d 0f       	add	r24, r29
 6de:	0e 94 52 02 	call	0x4a4	; 0x4a4 <ssd1306_send_command>
	avr_i2c_stop();
 6e2:	0e 94 c9 01 	call	0x392	; 0x392 <avr_i2c_stop>
		
	avr_i2c_start(SSD1306_ADDRESS << 1);
 6e6:	88 e7       	ldi	r24, 0x78	; 120
 6e8:	0e 94 af 01 	call	0x35e	; 0x35e <avr_i2c_start>
	avr_i2c_write(0x40);
 6ec:	80 e4       	ldi	r24, 0x40	; 64
 6ee:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
	
	for (uint8_t i = 0; i < 5; i++) {
 6f2:	c0 e0       	ldi	r28, 0x00	; 0
 6f4:	13 c0       	rjmp	.+38     	; 0x71c <ssd1306_draw_char+0xae>
		uint8_t col = pgm_read_byte(&FONTS[ch - 0x20][i]);
 6f6:	21 2f       	mov	r18, r17
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	20 52       	subi	r18, 0x20	; 32
 6fc:	31 09       	sbc	r19, r1
 6fe:	f9 01       	movw	r30, r18
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	e2 0f       	add	r30, r18
 706:	f3 1f       	adc	r31, r19
 708:	ee 0f       	add	r30, r30
 70a:	ff 1f       	adc	r31, r31
 70c:	ec 0f       	add	r30, r28
 70e:	f1 1d       	adc	r31, r1
 710:	e4 53       	subi	r30, 0x34	; 52
 712:	ff 4f       	sbci	r31, 0xFF	; 255
 714:	84 91       	lpm	r24, Z
		avr_i2c_write(col);
 716:	0e 94 ce 01 	call	0x39c	; 0x39c <avr_i2c_write>
	avr_i2c_stop();
		
	avr_i2c_start(SSD1306_ADDRESS << 1);
	avr_i2c_write(0x40);
	
	for (uint8_t i = 0; i < 5; i++) {
 71a:	cf 5f       	subi	r28, 0xFF	; 255
 71c:	c5 30       	cpi	r28, 0x05	; 5
 71e:	58 f3       	brcs	.-42     	; 0x6f6 <ssd1306_draw_char+0x88>
		uint8_t col = pgm_read_byte(&FONTS[ch - 0x20][i]);
		avr_i2c_write(col);
	}
	
	avr_i2c_stop();
 720:	0e 94 c9 01 	call	0x392	; 0x392 <avr_i2c_stop>
	
	indexcol += CHARS_COLS_LENGTH;
 724:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <indexcol>
 728:	8a 5f       	subi	r24, 0xFA	; 250
 72a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <indexcol>
};
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	08 95       	ret

00000738 <ssd1306_draw_string>:

void ssd1306_draw_string(char *str, uint8_t x, uint8_t y) {
 738:	ef 92       	push	r14
 73a:	ff 92       	push	r15
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 742:	66 23       	and	r22, r22
 744:	b4 f0       	brlt	.+44     	; 0x772 <ssd1306_draw_string+0x3a>
 746:	40 34       	cpi	r20, 0x40	; 64
 748:	a0 f4       	brcc	.+40     	; 0x772 <ssd1306_draw_string+0x3a>
 74a:	14 2f       	mov	r17, r20
 74c:	d6 2f       	mov	r29, r22
 74e:	7c 01       	movw	r14, r24
	indexcol = 0;
 750:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <indexcol>
	indexpage = 0;
 754:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
	uint8_t i = 0;
 758:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[i] != '\0') {
 75a:	05 c0       	rjmp	.+10     	; 0x766 <ssd1306_draw_string+0x2e>
		ssd1306_draw_char(str[i++], x, y);
 75c:	cf 5f       	subi	r28, 0xFF	; 255
 75e:	41 2f       	mov	r20, r17
 760:	6d 2f       	mov	r22, r29
 762:	0e 94 37 03 	call	0x66e	; 0x66e <ssd1306_draw_char>
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
	indexcol = 0;
	indexpage = 0;
	uint8_t i = 0;
	
	while (str[i] != '\0') {
 766:	f7 01       	movw	r30, r14
 768:	ec 0f       	add	r30, r28
 76a:	f1 1d       	adc	r31, r1
 76c:	80 81       	ld	r24, Z
 76e:	81 11       	cpse	r24, r1
 770:	f5 cf       	rjmp	.-22     	; 0x75c <ssd1306_draw_string+0x24>
		ssd1306_draw_char(str[i++], x, y);
	}
}
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	ff 90       	pop	r15
 77a:	ef 90       	pop	r14
 77c:	08 95       	ret

0000077e <uart_init>:
#include "Headers/uart.h"

#include <avr/io.h>

void uart_init(uint16_t baud) {
	uint16_t ubrr = (F_CPU / (16UL * baud)) - 1;
 77e:	a0 e0       	ldi	r26, 0x00	; 0
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	aa 1f       	adc	r26, r26
 788:	bb 1f       	adc	r27, r27
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	aa 1f       	adc	r26, r26
 790:	bb 1f       	adc	r27, r27
 792:	9c 01       	movw	r18, r24
 794:	ad 01       	movw	r20, r26
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	44 1f       	adc	r20, r20
 79c:	55 1f       	adc	r21, r21
 79e:	22 0f       	add	r18, r18
 7a0:	33 1f       	adc	r19, r19
 7a2:	44 1f       	adc	r20, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	74 e2       	ldi	r23, 0x24	; 36
 7aa:	84 ef       	ldi	r24, 0xF4	; 244
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 77 04 	call	0x8ee	; 0x8ee <__udivmodsi4>
 7b2:	21 50       	subi	r18, 0x01	; 1
 7b4:	31 09       	sbc	r19, r1

	UBRR0H = (ubrr >> 8);   // Baud rate high byte
 7b6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = ubrr;          // Baud rate low byte
 7ba:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0B = (1 << TXEN0) | (1 << RXEN0);  // Enable TX and RX
 7be:	88 e1       	ldi	r24, 0x18	; 24
 7c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8-bit data, 1 stop bit, no parity
 7c4:	86 e0       	ldi	r24, 0x06	; 6
 7c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 7ca:	08 95       	ret

000007cc <main>:
#include <avr/interrupt.h>

extern void timer1_ctc_ocrnx(void);
extern volatile uint8_t interrupted;

int main(void) {
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
 7d4:	c6 59       	subi	r28, 0x96	; 150
 7d6:	d1 09       	sbc	r29, r1
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	de bf       	out	0x3e, r29	; 62
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	cd bf       	out	0x3d, r28	; 61
	timer1_ctc_ocrnx();
 7e2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <timer1_ctc_ocrnx>
	uart_init(9600);
 7e6:	80 e8       	ldi	r24, 0x80	; 128
 7e8:	95 e2       	ldi	r25, 0x25	; 37
 7ea:	0e 94 bf 03 	call	0x77e	; 0x77e <uart_init>

	adc_init();
 7ee:	0e 94 00 02 	call	0x400	; 0x400 <adc_init>
	joystick_init();
 7f2:	0e 94 49 02 	call	0x492	; 0x492 <joystick_init>
	ssd1306_init();
 7f6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ssd1306_init>
	ssd1306_clear_screen();
 7fa:	0e 94 b8 02 	call	0x570	; 0x570 <ssd1306_clear_screen>
	
	uint16_t x, y;
	
	DDRC &= ~((1 << PC0) | (1 << PC1));  // Ensure ADC pins are inputs
 7fe:	87 b1       	in	r24, 0x07	; 7
 800:	8c 7f       	andi	r24, 0xFC	; 252
 802:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << PB2) | (1 << PB1);
 804:	84 b1       	in	r24, 0x04	; 4
 806:	86 60       	ori	r24, 0x06	; 6
 808:	84 b9       	out	0x04, r24	; 4
	
	char tt[150];
	sprintf(tt, "damn gg f fsa fsa ggga gsa fa f a a fa fa faf af asfsa");
 80a:	87 e3       	ldi	r24, 0x37	; 55
 80c:	e1 e0       	ldi	r30, 0x01	; 1
 80e:	f1 e0       	ldi	r31, 0x01	; 1
 810:	de 01       	movw	r26, r28
 812:	11 96       	adiw	r26, 0x01	; 1
 814:	01 90       	ld	r0, Z+
 816:	0d 92       	st	X+, r0
 818:	8a 95       	dec	r24
 81a:	e1 f7       	brne	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	ssd1306_draw_string(tt, 30, 30);
 81c:	4e e1       	ldi	r20, 0x1E	; 30
 81e:	6e e1       	ldi	r22, 0x1E	; 30
 820:	ce 01       	movw	r24, r28
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	0e 94 9c 03 	call	0x738	; 0x738 <ssd1306_draw_string>

	while (1)
	{
		if (interrupted) {
 828:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 82c:	88 23       	and	r24, r24
 82e:	e1 f3       	breq	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			interrupted = 0;
 830:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			y = smooth_adc(0);  // VRx on ADC0
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	0e 94 1c 02 	call	0x438	; 0x438 <smooth_adc>
 83a:	7c 01       	movw	r14, r24
			x = smooth_adc(1);  // VRy on ADC1
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	0e 94 1c 02 	call	0x438	; 0x438 <smooth_adc>
 842:	5c 01       	movw	r10, r24
			
			ssd1306_clear_prev();
 844:	0e 94 2f 03 	call	0x65e	; 0x65e <ssd1306_clear_prev>
			ssd1306_draw_pixel(((uint32_t)x * 128) / 1028, ((uint32_t)y * 64) / 1028, 1);
 848:	c7 01       	movw	r24, r14
 84a:	a0 e0       	ldi	r26, 0x00	; 0
 84c:	b0 e0       	ldi	r27, 0x00	; 0
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	aa 1f       	adc	r26, r26
 854:	bb 1f       	adc	r27, r27
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	aa 1f       	adc	r26, r26
 85c:	bb 1f       	adc	r27, r27
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	aa 1f       	adc	r26, r26
 864:	bb 1f       	adc	r27, r27
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	aa 1f       	adc	r26, r26
 86c:	bb 1f       	adc	r27, r27
 86e:	bc 01       	movw	r22, r24
 870:	cd 01       	movw	r24, r26
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	68 94       	set
 884:	cc 24       	eor	r12, r12
 886:	c2 f8       	bld	r12, 2
 888:	dc 2c       	mov	r13, r12
 88a:	e1 2c       	mov	r14, r1
 88c:	f1 2c       	mov	r15, r1
 88e:	a7 01       	movw	r20, r14
 890:	96 01       	movw	r18, r12
 892:	0e 94 77 04 	call	0x8ee	; 0x8ee <__udivmodsi4>
 896:	12 2f       	mov	r17, r18
 898:	c5 01       	movw	r24, r10
 89a:	a0 e0       	ldi	r26, 0x00	; 0
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	88 0f       	add	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	aa 1f       	adc	r26, r26
 8a4:	bb 1f       	adc	r27, r27
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	aa 1f       	adc	r26, r26
 8ac:	bb 1f       	adc	r27, r27
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	aa 1f       	adc	r26, r26
 8b4:	bb 1f       	adc	r27, r27
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	aa 1f       	adc	r26, r26
 8bc:	bb 1f       	adc	r27, r27
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	aa 1f       	adc	r26, r26
 8cc:	bb 1f       	adc	r27, r27
 8ce:	bc 01       	movw	r22, r24
 8d0:	cd 01       	movw	r24, r26
 8d2:	66 0f       	add	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	88 1f       	adc	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	a7 01       	movw	r20, r14
 8dc:	96 01       	movw	r18, r12
 8de:	0e 94 77 04 	call	0x8ee	; 0x8ee <__udivmodsi4>
 8e2:	82 2f       	mov	r24, r18
 8e4:	41 e0       	ldi	r20, 0x01	; 1
 8e6:	61 2f       	mov	r22, r17
 8e8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <ssd1306_draw_pixel>
 8ec:	9d cf       	rjmp	.-198    	; 0x828 <__DATA_REGION_LENGTH__+0x28>

000008ee <__udivmodsi4>:
 8ee:	a1 e2       	ldi	r26, 0x21	; 33
 8f0:	1a 2e       	mov	r1, r26
 8f2:	aa 1b       	sub	r26, r26
 8f4:	bb 1b       	sub	r27, r27
 8f6:	fd 01       	movw	r30, r26
 8f8:	0d c0       	rjmp	.+26     	; 0x914 <__udivmodsi4_ep>

000008fa <__udivmodsi4_loop>:
 8fa:	aa 1f       	adc	r26, r26
 8fc:	bb 1f       	adc	r27, r27
 8fe:	ee 1f       	adc	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	a2 17       	cp	r26, r18
 904:	b3 07       	cpc	r27, r19
 906:	e4 07       	cpc	r30, r20
 908:	f5 07       	cpc	r31, r21
 90a:	20 f0       	brcs	.+8      	; 0x914 <__udivmodsi4_ep>
 90c:	a2 1b       	sub	r26, r18
 90e:	b3 0b       	sbc	r27, r19
 910:	e4 0b       	sbc	r30, r20
 912:	f5 0b       	sbc	r31, r21

00000914 <__udivmodsi4_ep>:
 914:	66 1f       	adc	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	1a 94       	dec	r1
 91e:	69 f7       	brne	.-38     	; 0x8fa <__udivmodsi4_loop>
 920:	60 95       	com	r22
 922:	70 95       	com	r23
 924:	80 95       	com	r24
 926:	90 95       	com	r25
 928:	9b 01       	movw	r18, r22
 92a:	ac 01       	movw	r20, r24
 92c:	bd 01       	movw	r22, r26
 92e:	cf 01       	movw	r24, r30
 930:	08 95       	ret

00000932 <_exit>:
 932:	f8 94       	cli

00000934 <__stop_program>:
 934:	ff cf       	rjmp	.-2      	; 0x934 <__stop_program>
